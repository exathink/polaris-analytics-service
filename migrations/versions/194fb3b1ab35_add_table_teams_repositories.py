"""add_table_teams_repositories

Revision ID: 194fb3b1ab35
Revises: 43cce74bc18d
Create Date: 2021-07-06 00:57:52.595422

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '194fb3b1ab35'
down_revision = '43cce74bc18d'
branch_labels = None
depends_on = None

def migrate_data():
    # migrate existing data
    op.execute("""
            insert into analytics.teams_repositories (team_id, repository_id) 
            select team_id, repository_id from (
                select distinct author_team_id as team_id, repository_id  from analytics.commits
                union
                select distinct committer_team_id as team_id, repository_id from analytics.commits
            ) as TR
            where TR.team_id is not null
        """)

    # TODO: Update earliest_commmit and latest_commit for teams_repositories
    op.execute(
        """
        with author_repos_stats as (
            select author_team_id as team_id, repository_id,
            min(commit_date) as earliest_commit,
            max(commit_date) as latest_commit from
            analytics.commits
            group by author_team_id, repository_id
            having author_team_id is not null
        ),
        committer_repos_stats as (
            select committer_team_id as team_id, repository_id,
            min(commit_date) as earliest_commit,
            max(commit_date) as latest_commit from
            analytics.commits
            group by committer_team_id, repository_id
            having committer_team_id is not null
        ),
        teams_repos_stats as (
            select author_repos_stats.team_id, author_repos_stats.repository_id,
                   least(author_repos_stats.earliest_commit, committer_repos_stats.earliest_commit) as earliest_commit,
                   greatest(author_repos_stats.latest_commit, committer_repos_stats.latest_commit) as latest_commit
            from
                author_repos_stats inner join committer_repos_stats
                on author_repos_stats.team_id = committer_repos_stats.team_id and
                   author_repos_stats.repository_id = committer_repos_stats.repository_id
        )
        update analytics.teams_repositories
        set earliest_commit = teams_repos_stats.earliest_commit,
            latest_commit = teams_repos_stats.latest_commit
        from teams_repos_stats where teams_repos_stats.team_id = teams_repositories.team_id
            and teams_repos_stats.repository_id = teams_repositories.repository_id
        """
    )

    op.execute("""
        with teams_repos_commit_count as (
            select team_id, teams_repositories.repository_id, count(distinct commits.id) as commit_count
            from analytics.teams_repositories
                     inner join analytics.commits on
                    commits.repository_id = teams_repositories.repository_id
                    and (commits.author_team_id = teams_repositories.team_id or
                         commits.committer_team_id = teams_repositories.team_id)
            group by teams_repositories.team_id, teams_repositories.repository_id
        )
        update analytics.teams_repositories set commit_count = teams_repos_commit_count.commit_count
        from teams_repos_commit_count where teams_repos_commit_count.repository_id = teams_repositories.repository_id and
                                            teams_repos_commit_count.team_id = teams_repositories.team_id
        """)

def upgrade():
    op.create_table('teams_repositories',
                    sa.Column('repository_id', sa.Integer(), nullable=False),
                    sa.Column('team_id', sa.Integer(), nullable=False),
                    sa.Column('earliest_commit', sa.DateTime(), nullable=True),
                    sa.Column('latest_commit', sa.DateTime(), nullable=True),
                    sa.Column('commit_count', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['repository_id'], ['analytics.repositories.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['team_id'], ['analytics.teams.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('repository_id', 'team_id'),
                    schema='analytics'
                    )

    op.create_index(op.f('ix_analytics_teams_repositories_repository_id'), 'teams_repositories', ['repository_id'],
                    unique=False, schema='analytics')
    op.create_index(op.f('ix_analytics_teams_repositories_team_id'), 'teams_repositories', ['team_id'], unique=False,
                    schema='analytics')

    migrate_data()



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_analytics_teams_repositories_team_id'), table_name='teams_repositories', schema='analytics')
    op.drop_index(op.f('ix_analytics_teams_repositories_repository_id'), table_name='teams_repositories',
                  schema='analytics')
    op.drop_table('teams_repositories', schema='analytics')
    # ### end Alembic commands ###
